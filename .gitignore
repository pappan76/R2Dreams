import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { loadStripe } from "@stripe/stripe-js";
import { Elements, useStripe, useElements, CardElement } from "@stripe/react-stripe-js";

const stripePromise = loadStripe("your-publishable-key-here");

function CheckoutForm({ onSuccess }) {
  const stripe = useStripe();
  const elements = useElements();

  const handlePayment = async (event) => {
    event.preventDefault();
    if (!stripe || !elements) return;

    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: "card",
      card: elements.getElement(CardElement),
    });

    if (!error) {
      onSuccess();
    }
  };

  return (
    <form onSubmit={handlePayment} className="space-y-4">
      <CardElement className="p-2 border rounded-md" />
      <Button type="submit" className="w-full bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg" disabled={!stripe}>Pay Now</Button>
    </form>
  );
}

export default function TicketOrder() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [event, setEvent] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [notes, setNotes] = useState("");
  const [submitted, setSubmitted] = useState(false);
  const [paymentSuccess, setPaymentSuccess] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    setSubmitted(true);
  };

  return (
    <Elements stripe={stripePromise}>
      <div className="flex justify-center items-center min-h-screen bg-gray-100">
        <Card className="w-96 p-6 shadow-lg bg-white rounded-2xl">
          <CardContent>
            {!submitted ? (
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <Label>Name</Label>
                  <Input value={name} onChange={(e) => setName(e.target.value)} required />
                </div>
                <div>
                  <Label>Email</Label>
                  <Input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
                </div>
                <div>
                  <Label>Event</Label>
                  <Input value={event} onChange={(e) => setEvent(e.target.value)} required />
                </div>
                <div>
                  <Label>Quantity</Label>
                  <Input type="number" value={quantity} onChange={(e) => setQuantity(e.target.value)} min={1} required />
                </div>
                <div>
                  <Label>Additional Notes</Label>
                  <Textarea value={notes} onChange={(e) => setNotes(e.target.value)} />
                </div>
                <Button type="submit" className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg">Proceed to Payment</Button>
              </form>
            ) : !paymentSuccess ? (
              <CheckoutForm onSuccess={() => setPaymentSuccess(true)} />
            ) : (
              <div className="text-center">
                <h2 className="text-xl font-bold">Order & Payment Successful!</h2>
                <p>Thank you, {name}. Your order for {quantity} ticket(s) to {event} has been confirmed.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </Elements>
  );
}


